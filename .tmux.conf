
#------------------------------------------------------------------------------
# Powerline settings
#------------------------------------------------------------------------------

set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
#run-shell 'powerline-daemon -q --replace'
#source /usr/lib/python3.7/site-packages/powerline/bindings/tmux/powerline.conf
set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "centre"
set-option -g status-bg "colour235"
set-option -g status-left-length 60
set-option -g status-right-length 90
set-option -g status-left "#(~/.tmux/tmux-powerline/powerline.sh left)"
set-option -g status-right "#(~/.tmux/tmux-powerline/powerline.sh right)"
set-window-option -g window-status-format "#[fg=colour253, bg=colour235] #I: #W #[default]"
set-window-option -g window-status-current-format "#[fg=colour215, bg=colour235] [#I: #W*] #[default]"

#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# General settings
#------------------------------------------------------------------------------

# enable utf-8
#setw -g utf8 on
# UTF-8による文字(漢字や絵文字など)が使われることを宣言
# tmux 2.2より，このオプションは不要かつ削除

# max history limit
set -g history-limit 5000
# 各ペインで遡れる行数

# escape time
set -s escape-time 0
# エスケープキーを押した後にキー入力を受け付ける時間を設定(単位: ミリ秒)
# vimでの反応が遅くなるだけなので0にする

# `display-panes` コマンドを実行した時に数字が表示される時間(単位: ミリ秒)
# デフォルトだと短かったので，3秒間表示されるようにした
set -g display-panes-time 3000

# ウィンドウの番号，ペインの番号を0ではなく1から始める
set -g base-index 1
set -g pane-base-index 1

# ウィンドウを消したときに，自動で番号を詰める
set -g renumber-windows on

# automatic-rename-formatで指定した形式で端末のタイトルを自動で変更
setw -g automatic-rename on

#------------------------------------------------------------------------------

# あるセッションは複数のウィンドウから構成され，一つのウィンドウの中には
# 複数のペインが含まれる
#
# 略記法
# [key] = prefix + key
# (key) = Alt + key
# === 概略図とキーバインド ===
#
#         +----------------+
#         |    (←,→,h,l)   ↓(num) OR click status bar       ↓ (Enter)
#      window1 <------> window2          window3         新規 window4
#   ===============================================================
#       pane1            pane1            pane1           pane1
#         ↕ (j,k) フォーカス
#       pane2     + - -  pane2 - 移動 -> |pane2|
#                 |移動           (L)
#      |pane3| <- +      pane3
#                (H)       ↓ (x)                            ↓ (X)
#                      ペイン削除                     ウィンドウ削除
#
#
# === ウィンドウ内の操作 ===
#
#   +---------------+------------+
#   |pane1          |pane3       |
#   |               |            |
#   |               |            |
#   +---------------+            |
#   |pane2          |            |
#   |               |            |
#   |               |            |
#   +---------------+------------+
#
# ペイン分割:
#   - 左右に分割         : (|)
#   - 上下に分割         : (-)
# フォーカスを動かす     : (j),(k) OR マウスでクリック
# ペインの順序を入れ替え : (J),(K)
# ペインを削除           : (c)
# レイアウトを変更       : (Space)
# 1つのペインを全画面に  : (f)
# ペイン境界を動かす:
#             (a)
#              ↑
#        (,) ← + → (.)
#              ↓        OR マウスで境界をドラッグ
#             (z)
# 隣のウィンドウにペインを結合           : (H),(L)
# 指定した番号のウィンドウにペインを結合 : (Shift+num)

#------------------------------------------------------------------------------
# Keybind (normal mode)
#------------------------------------------------------------------------------

# prefix key ^b -> ^g
set -g prefix C-g
bind-key C-g send-prefix

# vi like key binding
# もとから準備されているセットを使う
setw -g mode-keys vi
#bind-key -t vi-copy v begin-selection

# Update default binding of `Enter` to also use copy-pipe
unbind -Tcopy-mode-vi Enter
 
# Setup 'v' to begin selection as in Vim
bind -Tcopy-mode-vi v send -X begin-selection

# (x): ペインを削除する
# ただし，ウィンドウ内に1つだけしかないときには確認メッセージを出す
bind-key -n M-x if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"Kill the only pane in the window? It will kill this window too. (y/n)\" kill-pane" \
    "kill-pane"

# (X): ウィンドウを削除する
# ただし，セッション内に1つだけしかないときには確認メッセージを出す
bind-key -n M-X if "tmux display -p \"#{session_windows}\" | grep ^1\$"\
    "confirm-before -p \"Kill the only window in this session? It will kill the session too. (y/n)\" kill-window" \
    "kill-window"

# (-): 上下に分割, (|): 左右に分割
bind-key -n M-- split-window -v -c "#{pane_current_path}"
bind-key -n M-| split-window -h -c "#{pane_current_path}"

# [s]: 上下に分割，[v]: 左右に分割
bind-key s split-window -v -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"

# (j)/(Down): フォーカスを次に，(k)/(Up)フォーカスを前に
bind-key -n M-j select-pane -t :.+
bind-key -n M-k select-pane -t :.-
bind-key -n M-Down select-pane -t :.+
bind-key -n M-Up select-pane -t :.-

# (m): マスターペイン(ペイン番号1)にフォーカス
bind-key -n M-m select-pane -t :.1

# (M): 選択したペインをマスターペインに移動
bind-key -n M-M swap-pane -d -t :.1

# (J)/(K): ペインの順番入れ替え
bind-key -n M-J swap-pane -D
bind-key -n M-K swap-pane -U

# (H)/(L): 選択したペインを左右のウィンドウに移動させる
bind-key -n M-L join-pane -t :+
bind-key -n M-H join-pane -t :-

# (Shift + number): 指定した番号のウィンドウにペインを移動
bind-key -n M-! join-pane -t :1
bind-key -n M-'"' join-pane -t :2
bind-key -n M-'#' join-pane -t :3
bind-key -n M-'$' join-pane -t :4
bind-key -n M-% join-pane -t :5
bind-key -n M-& join-pane -t :6
bind-key -n M-"'" join-pane -t :7
bind-key -n M-( join-pane -t :8
bind-key -n M-) join-pane -t :9

# (<)/(>): 左右にペイン境界を動かす
# (a)/(z): 上下にペイン境界を動かす
bind-key -n M-'<' resize-pane -L 1
bind-key -n M-z resize-pane -D 1
bind-key -n M-a resize-pane -U 1
bind-key -n M-'>' resize-pane -R 1

# (f): 選択したペインを最大化表示
bind-key -n M-f resize-pane -Z

# (q): 各ペイン番号を表示
bind-key -n M-q display-panes

# (h)/(Left): 左のウィンドウにフォーカス
# (l),(Right): 右のウィンドウにフォーカス
bind-key -n M-Right next-window
bind-key -n M-Left previous-window
bind-key -n M-l next-window
bind-key -n M-h previous-window

# (Space): ペインレイアウトを変更
bind-key -n M-Space next-layout

# (number): 指定した番号のウィンドウにフォーカス
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# [W]: ウィンドウ名を指定してフォーカス
bind-key W command-prompt "select-window -t '%%'"

# (Enter): 新しいウィンドウを作成
bind-key -n M-Enter new-window -c "#{pane_current_path}"

# [t]: ツリー表示モード(今あるセッション，その中のウィンドウにアタッチ)
bind-key t choose-tree

# [Ctrl + C]: フォーカスされているペインの内容をコピーして新しいウィンドウでvimで開く
bind-key C-c run 'tmux capture-pane -S -10240 -p > /tmp/tmux-capture.txt'\;\
             new-window "vim + /tmp/tmux-capture.txt"

# F11: ステータスバーの表示をトグルする
bind-key -n F11 set status

# ^b + r: 設定ファイルを再読み込み
bind-key r source-file ~/.tmux.conf \; display "Reloaded!"

#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Keybind (copy mode)
#------------------------------------------------------------------------------

# v: begin selection
bind-key -T copy-mode-vi 'v' send -X begin-selection

# space: halfpage down
bind-key -T copy-mode-vi 'Space' send -X halfpage-down

# back space: halfpage up
bind-key -T copy-mode-vi 'Bspace' send -X halfpage-up

# V: 行選択
#bind-key -t vi-copy V select-line

# C-v: 選択モードを矩形選択の間でトグル
#bind-key -t vi-copy C-v rectangle-toggle

# y: 選択範囲をコピー
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"

#p: バッファの内容をペースト
bind-key -T copy-mode-vi p run "xsel -o | tmux load-buffer - ; tmux paste-buffer"

# Y: 行をコピー
#bind-key -t vi-copy Y copy-line

#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Color
#------------------------------------------------------------------------------

# use 256colors
#set-option -g default-terminal screen-256color
set-option -g default-terminal xterm-256color # for italic in vim

# message line
set -g message-fg white
set -g message-bg colour235
set -g message-attr bright

#------------------------------------------------------------------------------
# WM window title
#------------------------------------------------------------------------------

# enable wm window titles
set -g set-titles on

# wm window title string (uses status bar variables)
set -g set-titles-string "#S - #I: #W"

#------------------------------------------------------------------------------
# Status line
#------------------------------------------------------------------------------

# setup with powerline

#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Window Options
#------------------------------------------------------------------------------
set-window-option -g aggressive-resize on
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Plugin with tpm
#------------------------------------------------------------------------------

# if use this functions, you have to install tpm
# for more details, see https://github.com/tmux-plugins/tpm

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
#set -g @plugin 'jimeh/tmux-themepack'

# Save session
set -g @resurrect-strategy-vim 'session' # restore session of vim
set -g @resurrect-processes 'vifm'#'irb pry "~rails server" "~rails console"' # save vifm process.
#set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-boot 'off'
#set -g @continuum-systemd-start-cmd 'new-session -n$USER -s $USER@HOSTNAME'
set -g @continuum-restore 'on' # automatic restore the session # this option cannot save window ratio
set -g @continuum-save-interval 'off'

# Set themepack
#set -g @themepack 'powerline/block/cyan'

# run plugin
run-shell '~/.tmux/plugins/tpm/tpm'

#------------------------------------------------------------------------------
